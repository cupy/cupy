name: "Pre-review Tests"

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-18.04
    env:
      CUPY_CI: GitHub

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        # cupyx.array_api uses Python 3.8 syntaxes
        python-version: '3.8'

    - name: Load ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache-${{ github.sha }}
        restore-keys: ccache-${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.sha }}

    - name: Setup ccache
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ccache
        echo "PATH=/usr/lib/ccache:${PATH}" >> "${GITHUB_ENV}"
        ccache --max-size 0.5Gi --cleanup --show-stats

    - name: Build
      run: |
        pip install -U pip wheel
        pip install cython
        READTHEDOCS=True pip install -v -e .[stylecheck]

    - name: Coding Style (flake8)
      run: |
        flake8
        flake8 --config=.flake8.cython

    - name: Coding Style (autopep8)
      run: |
        autopep8 -r . --diff | tee check_autopep8
        test ! -s check_autopep8

    - name: Test - Docs Build
      run: |
        # Test to detect invalid escape sequences in docstrings (#1619)
        python -Werror::DeprecationWarning -m compileall -f -q cupy cupyx examples tests docs
        pushd docs
        pip install -r requirements.txt
        SPHINXOPTS=-W make html
        popd

    - name: Test - Installer
      run: |
        pip install mypy types-setuptools
        pushd install
        mypy cupy_builder

    - name: Test - CI Tools
      run: |
        pip install PyYAML types-PyYAML pygithub mypy
        pushd .pfnci
        ./generate.py --matrix matrix.yaml --schema schema.yaml --dry-run
        mypy generate.py
        popd
        pushd .github/workflows
        mypy flexci_dispatcher.py
        popd

  rocm-build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build & Test
      run: |
        docker run --rm -v "${PWD}:/src" -w /src "rocm/dev-ubuntu-20.04:4.3.1-complete" bash .github/workflows/pretest-rocm-test.sh
