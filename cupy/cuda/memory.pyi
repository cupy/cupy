from collections.abc import Callable

from typing_extensions import Self

from cupy.cuda.device import Device
from cupy.cuda.stream import Stream

class OutOfMemoryError(Exception):
    def __init__(self, size: int, total: int, limit: int = ...) -> None: ...

class BaseMemory:
    ptr: int
    size: int

    def __int__(self) -> int: ...
    @property
    def device(self) -> Device: ...

class Memory(BaseMemory):
    device_id: int
    def __init__(self, size: int) -> None: ...

class MemoryAsync(BaseMemory):
    device_id: int
    stream_ref: Stream
    def __init__(self, size: int, stream: Stream) -> None: ...

class UnownedMemory(BaseMemory):
    device_id: int
    def __init__(
        self,
        ptr: int,
        size: int,
        owner: object,
        device_id: int = ...,
    ) -> None: ...

class ManagedMemory(BaseMemory):
    device_id: int
    def __init__(self, size: int) -> None: ...
    def prefetch(self, stream: Stream, *, device_id: int = ...) -> None: ...
    def advise(self, advise: int, dev: Device) -> None: ...

class SystemMemory(BaseMemory):
    device_id: int
    def __init__(self, size: int) -> None: ...
    @staticmethod
    def from_external(ptr: int, size: int, owner: object) -> SystemMemory: ...
    def prefetch(self, stream: Stream, *, device_id: int = ...) -> None: ...
    def advise(self, advise: int, dev: Device) -> None: ...

class MemoryPointer:
    device_id: int
    mem: BaseMemory
    ptr: int
    def __init__(self, mem: BaseMemory, offset: int) -> None: ...
    def __int__(self) -> int: ...
    @property
    def device(self) -> Device: ...
    # MEMO: args renamed
    def __add__(self, offset: int) -> MemoryPointer: ...
    def __iadd__(self, offset: int) -> Self: ...
    def __sub__(self, offset: int) -> MemoryPointer: ...
    def __isub__(self, offset: int) -> Self: ...
    def copy_from_device(self, src: MemoryPointer, size: int) -> None: ...
    def copy_from_device_async(
        self, src: MemoryPointer, size: int, stream: Stream | None = ...
    ) -> None: ...
    def copy_from_host(self, mem: int, size: int) -> None: ...
    def copy_from_host_async(
        self, mem: int, size: int, stream: Stream | None = ...
    ) -> None: ...
    def copy_from(self, mem: int | MemoryPointer, size: int) -> None: ...
    def copy_from_async(
        self, mem: int | MemoryPointer, size: int, stream: Stream | None = ...
    ) -> None: ...
    def copy_to_host(self, mem: int, size: int) -> None: ...
    def copy_to_host_async(
        self, mem: int, size: int, stream: Stream | None = ...
    ) -> None: ...
    def memset(self, value: int, size: int) -> None: ...
    def memset_async(
        self, value: int, size: int, stream: Stream | None = ...
    ) -> None: ...

def malloc_async(size: int) -> MemoryPointer: ...
def malloc_managed(size: int) -> MemoryPointer: ...
def malloc_system(size: int) -> MemoryPointer: ...
def alloc(size: int) -> MemoryPointer: ...
def set_allocator(
    allocator: Callable[[int], MemoryPointer] | None = ...,
) -> None: ...
def get_allocator() -> Callable[[int], MemoryPointer]: ...

# TODO: Annotate other entries when needed
