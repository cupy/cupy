#ifndef INCLUDE_GUARD_CUPY_CUDA_MEMORY_H
#define INCLUDE_GUARD_CUPY_CUDA_MEMORY_H

#include "memory_api.h"  // generated by Cython from cupy.cuda.memory

#ifdef __cplusplus
extern "C" {
#endif

/*
  *********************** C public API ************************
*/
typedef struct cupy_allocator_handle_t cupy_allocator_handle;
cupy_allocator_handle* get_cupy_allocator_handle();
void destroy_cupy_allocator_handle(cupy_allocator_handle* ptr);
void* cupy_malloc(cupy_allocator_handle* handle, size_t size);
void cupy_free(cupy_allocator_handle* handle, void* ptr);


/*
  *********************** Implementation ************************
*/

typedef struct cupy_allocator_handle_t {
    int is_init;
    void* (*_malloc)(size_t);
    void (*_free)(void*);
} cupy_allocator_handle;

cupy_allocator_handle* get_cupy_allocator_handle() {
    cupy_allocator_handle* alloc = (cupy_allocator_handle*)malloc(sizeof(*alloc));
    alloc->is_init = Py_IsInitialized();
    if (!alloc->is_init) {
        Py_Initialize();
    }
    import_cupy__cuda__memory();
    alloc->_malloc = cupy_c_malloc; // defined in cupy.cuda.memory
    alloc->_free = cupy_c_free;     // defined in cupy.cuda.memory
    return alloc;
}

void destroy_cupy_allocator_handle(cupy_allocator_handle* ptr) {
    ptr->_malloc = NULL;
    ptr->_free = NULL;
    if (!ptr->is_init) {
        Py_Finalize();
    }
    free((void*)ptr);
}

void* cupy_malloc(cupy_allocator_handle* handle, size_t size) {
    return handle->_malloc(size);
}

void cupy_free(cupy_allocator_handle* handle, void* ptr) {
    handle->_free(ptr);
}

#ifdef __cplusplus
}
#endif
    
#endif // #ifndef INCLUDE_GUARD_CUPY_CUDA_MEMORY_H
