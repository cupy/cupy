from collections.abc import Callable
from typing import ClassVar, TypeVar
from typing_extensions import Self

from cupy.cuda.graph import Graph

class Event:
    ptr: int

    def __init__(
        self,
        block: bool = ...,
        disable_timing: bool = ...,
        interprocess: bool = ...,
    ) -> None: ...
    @property
    def done(self) -> bool: ...
    def record(self, stream: Stream | None = ...) -> None: ...
    def synchronize(self) -> None: ...

def get_elapsed_time(start: Event, end: Event) -> float: ...

_T = TypeVar("_T")

class _BaseStream:
    ptr: int
    device_id: int

    def __init__(self, ptr: int, device_id: int) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, *args: object) -> None: ...
    def use(self) -> Self: ...
    @property
    def done(self) -> bool: ...
    def synchronize(self) -> None: ...
    def add_callback(
        self, callback: Callable[[Stream, int, _T], None], arg: _T
    ) -> None: ...
    def launch_host_func(
        self, func: Callable[[_T], None], arg: _T
    ) -> None: ...
    def record(self, event: Event | None = ...) -> Event: ...
    def wait_event(self, event: Event) -> None: ...
    def begin_capture(self, mode: int | None = ...) -> None: ...
    def end_capture(self) -> Graph: ...
    def is_capturing(self) -> bool: ...
    @property
    def is_blocking(self) -> bool: ...
    @property
    def priority(self) -> int: ...

class Stream(_BaseStream):
    null: ClassVar[Stream]
    ptds: ClassVar[Stream] # Missing in HIP

    def __init__(
        self,
        null: bool = ...,
        non_blocking: bool = ...,
        ptds: bool = ...,
        priority: int | None = ...,
    ) -> None: ...

class ExternalStream(_BaseStream):
    def __init__(self, ptr: int, device_id: int = ...) -> None: ...
